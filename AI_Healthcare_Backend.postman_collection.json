{
  "info": {
    "name": "AI Healthcare Backend API",
    "description": "Complete API collection for the AI Healthcare Backend with authentication endpoints",
    "version": "1.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{jwt_token}}",
        "type": "string"
      }
    ]
  },
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:3002",
      "type": "string"
    },
    {
      "key": "jwt_token",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Health Check",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/health",
          "host": ["{{base_url}}"],
          "path": ["health"]
        },
        "description": "Check if the backend server is running and healthy"
      },
      "response": []
    },
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Register Patient",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    if (response.success && response.data && response.data.token) {",
                  "        pm.environment.set('jwt_token', response.data.token);",
                  "        pm.collectionVariables.set('jwt_token', response.data.token);",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"patient@example.com\",\n  \"password\": \"password123\",\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"phone\": \"+1234567890\",\n  \"dateOfBirth\": \"1990-01-01\",\n  \"gender\": \"male\",\n  \"role\": \"patient\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/auth/register",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "register"]
            },
            "description": "Register a new patient account"
          },
          "response": []
        },
        {
          "name": "Register Doctor",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    if (response.success && response.data && response.data.token) {",
                  "        pm.environment.set('jwt_token', response.data.token);",
                  "        pm.collectionVariables.set('jwt_token', response.data.token);",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"doctor@example.com\",\n  \"password\": \"password123\",\n  \"firstName\": \"Dr. Sarah\",\n  \"lastName\": \"Johnson\",\n  \"phone\": \"+1234567891\",\n  \"role\": \"doctor\",\n  \"specialization\": \"Cardiology\",\n  \"qualification\": \"MD, FACC\",\n  \"experience\": 10,\n  \"department\": \"Heart Center\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/auth/register",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "register"]
            },
            "description": "Register a new doctor account"
          },
          "response": []
        },
        {
          "name": "Login",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.success && response.data && response.data.token) {",
                  "        pm.environment.set('jwt_token', response.data.token);",
                  "        pm.collectionVariables.set('jwt_token', response.data.token);",
                  "        console.log('JWT Token saved:', response.data.token);",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"patient@example.com\",\n  \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/auth/login",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "login"]
            },
            "description": "Login with email and password. JWT token will be automatically saved for authenticated requests."
          },
          "response": []
        },
        {
          "name": "Get Profile",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{jwt_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/auth/profile",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "profile"]
            },
            "description": "Get current user profile information (requires authentication)"
          },
          "response": []
        },
        {
          "name": "Verify Token",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{jwt_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/auth/verify",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "verify"]
            },
            "description": "Verify if the current JWT token is valid"
          },
          "response": []
        },
        {
          "name": "Change Password",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{jwt_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"currentPassword\": \"password123\",\n  \"newPassword\": \"newpassword123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/auth/change-password",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "change-password"]
            },
            "description": "Change user password (requires authentication and current password)"
          },
          "response": []
        },
        {
          "name": "Request Password Reset",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"patient@example.com\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/auth/reset-password-request",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "reset-password-request"]
            },
            "description": "Request a password reset token for the given email"
          },
          "response": []
        },
        {
          "name": "Confirm Password Reset",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"resetToken\": \"your-reset-token-here\",\n  \"newPassword\": \"newpassword123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/auth/reset-password-confirm",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "reset-password-confirm"]
            },
            "description": "Confirm password reset with token and new password"
          },
          "response": []
        },
        {
          "name": "Logout",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{jwt_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/auth/logout",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "logout"]
            },
            "description": "Logout current user (clears client-side token)"
          },
          "response": []
        }
      ],
      "description": "Authentication endpoints for user registration, login, and profile management"
    },
    {
      "name": "Test Invalid Credentials",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"email\": \"invalid@example.com\",\n  \"password\": \"wrongpassword\"\n}"
        },
        "url": {
          "raw": "{{base_url}}/api/auth/login",
          "host": ["{{base_url}}"],
          "path": ["api", "auth", "login"]
        },
        "description": "Test login with invalid credentials (should return 401)"
      },
      "response": []
    },
    {
      "name": "Test Protected Route Without Token",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/api/auth/profile",
          "host": ["{{base_url}}"],
          "path": ["api", "auth", "profile"]
        },
        "description": "Test accessing protected route without authentication token (should return 401)"
      },
      "response": []
    },
    {
      "name": "Test Registration Validation",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"email\": \"invalid-email\",\n  \"password\": \"123\",\n  \"firstName\": \"\",\n  \"lastName\": \"\",\n  \"phone\": \"\"\n}"
        },
        "url": {
          "raw": "{{base_url}}/api/auth/register",
          "host": ["{{base_url}}"],
          "path": ["api", "auth", "register"]
        },
        "description": "Test registration with invalid data (should return validation errors)"
      },
      "response": []
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// This script runs before each request",
          "console.log('Making request to:', pm.request.url);"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// This script runs after each request",
          "console.log('Response status:', pm.response.code);",
          "console.log('Response time:', pm.response.responseTime + 'ms');"
        ]
      }
    }
  ]
}